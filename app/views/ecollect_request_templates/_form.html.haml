/ :css
/   .required:after {
/     content:" *";
/     color: red;
/   }
= simple_form_for @ecollect_request_template, :html => {:class=>'form-horizontal', :autocomplete=>"off"} do |f|
  = hidden_field_tag :customer_code, params[:customer_code]
  = hidden_field_tag :step_name, params[:step_name]
  = hidden_field_tag :ecol_req_template_count, @ecollect_request_templates.present?
  = hidden_field_tag :cust_code_exist, @customer_code_exist
  .control-group
    = f.label ' '
    #msg-error
      = error_message_for(@ecollect_request_template, :base, :prepend_text => "")
  .form-main{:style=>'width: 50%'}  
    .control-group
      = f.label :client_code, "Customer Code", :class => 'control-label', :class => 'control-label required'
      - if f.object.new_record?
        = f.text_field :client_code,:value => params[:customer_code],:readonly => true
      - else
        = f.text_field :client_code,readonly: true
      #msg-error
        = error_message_for(@ecollect_request_template, :client_code, :prepend_text => "")
    .control-group
      = f.label :request_type, "Request Type", :class => 'control-label', :class => 'control-label required'
      = f.select :request_type, [ 'POST', 'GET'], :prompt => 'Select Request Type'
      #msg-error
        = error_message_for(@ecollect_request_template, :app_id, :prepend_text => "")
    .control-group
      = f.label :is_encryption_required, "Is Encryption enabled?", :class => 'control-label', :class => 'control-label required'
      = f.check_box :is_encryption_required,{},1,0
      #msg-error
        = error_message_for(@ecollect_request_template, :is_encryption_required, :prepend_text => "")
    .control-group
      = f.label :algorithm, "Algorithm", :class => 'control-label', :class => 'control-label required'
      = f.select :algorithm, [ 'AES', 'ECB','PKCS5Padding'], :prompt => 'Select Algorithm'
      #msg-error
        = error_message_for(@ecollect_request_template, :algorithm, :prepend_text => "")
    .control-group
      = f.label :api_type, "Parameter Type", :class => 'control-label', :class => 'control-label required'
      = f.select :api_type, [ 'Header', 'Query','Body','Path'], :prompt => 'Select Parameter Type'
      #msg-error
        = error_message_for(@ecollect_request_template, :api_type, :prepend_text => "")
    .control-group
      = f.label :decrypt_response, "Decrypt Response", :class => 'control-label', :class => 'control-label required'
      = f.check_box :decrypt_response,{},1,0
      #msg-error
        = error_message_for(@ecollect_request_template, :decrypt_response, :prepend_text => "")
    .control-group
      = f.label :is_hash_required, "Hash enabled?", :class => 'control-label', :class => 'control-label required'
      = f.check_box :is_hash_required,{},1,0
      #msg-error
        = error_message_for(@ecollect_request_template, :is_hash_required, :prepend_text => "")
    %hr{:style => "border: none;height: 1px;background-color: lightgray;width:1350px;"}   
  .form-extended{:style=>'width: 50%;'}
    .control-group
      = f.label :request, "Request", :class => 'control-label', :class => 'control-label required'
      = f.text_area :request, :style => 'height:100px'
      #msg-error
        = error_message_for(@ecollect_request_template, :request, :prepend_text => "")
    .control-group
      = f.label :url, "Encrypt Key", :class => 'control-label', :class => 'control-label required'
      = f.text_field :url
      #msg-error
        = error_message_for(@ecollect_request_template, :encrypt_key, :prepend_text => "")
    .control-group
      = f.label :secret_key, "Secret Key", :class => 'control-label', :class => 'control-label required'
      = f.text_field :secret_key
      #msg-error
        = error_message_for(@ecollect_request_template, :secret_key, :prepend_text => "")

  .form-main{:style=>'width: 100%;'}
    #ecol-hash-templates-form
      = f.fields_for :ecollect_hash_templates do |ecollect_hash_template|
        .form-main{:style=>'width: 100%'}  
          - unless f.object.new_record?
            .control-group
              = ecollect_hash_template.label :request_template_id, "Request Template ID", :class => 'control-label', :class => 'control-label required'
              = ecollect_hash_template.text_field :request_template_id,disabled: true
        .form-main{:style=>'width: 50%'}  
          .control-group
            = ecollect_hash_template.label :checksum_type, "Checksum Type", :class => 'control-label', :class => 'control-label required'
            = ecollect_hash_template.select :checksum_type, [ 'MD5', 'SHA1','SHA256','SHA512'], :prompt => 'Select Checksum Type'
          .control-group
            = ecollect_hash_template.label :parameter_type, "Parameter Type", :class => 'control-label', :class => 'control-label required'
            = ecollect_hash_template.select :parameter_type, [ 'Header', 'Query','Body','Path'], :prompt => 'Select Parameter Type'
        .form-extended{:style=>'width: 50%;'}
          .control-group
            = ecollect_hash_template.label :key, "Key", :class => 'control-label', :class => 'control-label required'
            = ecollect_hash_template.text_field :key
          .control-group
            = ecollect_hash_template.label :request, "Request", :class => 'control-label', :class => 'control-label required'
            = ecollect_hash_template.text_area :request, :style => 'height:100px'
        .form-main{:style=>'width: 100%'}  
          %hr{:style => "border: none;height: 1px;background-color: lightgray;width:1350px;"}   
    #ecol-hash-parameters-form
      = f.fields_for :ecollect_hash_parameters do |ecollect_hash_parameter|
        = render 'ecollect_hash_parameter_fields', f: ecollect_hash_parameter
      .links
        = link_to_add_association button_tag('+ Add Hash Parameter', type: "button", class: "ecollect-hash-parameter-add-entry btn btn-primary",style: "float:left;margin-bottom:17px;border: none;outline:none;background: #787878;"), f, :ecollect_hash_parameters
    %hr{:style => "border: none;height: 1px;background-color: lightgray;width:1350px;"}   
  #ecol-request-parameters-form
    = f.fields_for :ecollect_request_parameters do |ecollect_request_parameter|
      = render 'ecollect_request_parameter_fields', f: ecollect_request_parameter
    .links
      = link_to_add_association button_tag('+ Add Request Parameter', type: "button", class: "ecollect-req-parameter-add-entry btn btn-primary",style: "float:left;margin-bottom:17px;border: none;outline:none;background: #787878;"), f, :ecollect_request_parameters
  .form-actions
    - (f.object.new_record?) ? label_name = "Create" : label_name = "Update"
    = f.button "submit" ,:class=>"btn btn-primary", :id => 'submit_ecollect_request_template', :value => "#{label_name} Request Template"
    = link_to :Cancel,'/ecollect_request_templates', :name => 'cancel', :class=>"cancel btn"


:javascript
  $(document).ready(function(){
    var step_name = ["Validate", "Notify"];
    if($("#customer_code").val() == "" || !step_name.includes($("#step_name").val())) {
      $("#new_ecollect_request_template :input").prop("disabled", true);
    }
    if($("#ecol_req_template_count").val() == "true" || $("#cust_code_exist").val() == "false") {
      $("#new_ecollect_request_template :input").prop("disabled", true);
    }
    if(!$('#ecollect_request_template_is_encryption_required').is(":checked")){
      $('#ecollect_request_template_algorithm').val('');
      $("#ecollect_request_template_algorithm").attr('readonly', 'readonly');
      $("#ecollect_request_template_algorithm").css("pointer-events","none");
      $('#ecollect_request_template_api_type').val('');
      $("#ecollect_request_template_api_type").attr('readonly', 'readonly');
      $("#ecollect_request_template_api_type").css("pointer-events","none");
      $('#ecollect_request_template_url').val('');
      $('#ecollect_request_template_url').prop('readOnly',true);
      $('#ecollect_request_template_secret_key').val('');
      $('#ecollect_request_template_secret_key').prop('readOnly',true);
      $('#ecollect_request_template_decrypt_response').attr('checked', false);
      $("#ecollect_request_template_decrypt_response").css("pointer-events","none");
    }
    else {
      $("#ecollect_request_template_algorithm").attr('readonly', false);
      $("#ecollect_request_template_api_type").attr('readonly', false);
      $("#ecollect_request_template_algorithm").css("pointer-events","auto");
      $("#ecollect_request_template_api_type").css("pointer-events","auto");
      $('#ecollect_request_template_url').prop('readOnly',false);
      $('#ecollect_request_template_secret_key').prop('readOnly',false);
      $("#ecollect_request_template_decrypt_response").css("pointer-events","auto");
    }
    
    $("#ecollect_request_template_is_encryption_required").on("click", function () {
      if (!$(this).is(":checked")){
        $('#ecollect_request_template_algorithm').val('');
        $("#ecollect_request_template_algorithm").attr('readonly', 'readonly');
        $("#ecollect_request_template_algorithm").css("pointer-events","none");
        $('#ecollect_request_template_api_type').val('');
        $("#ecollect_request_template_api_type").attr('readonly', 'readonly');
        $("#ecollect_request_template_api_type").css("pointer-events","none");
        $('#ecollect_request_template_url').val('');
        $('#ecollect_request_template_url').prop('readOnly',true);
        $('#ecollect_request_template_secret_key').val('');
        $('#ecollect_request_template_secret_key').prop('readOnly',true);
        $('#ecollect_request_template_decrypt_response').attr('checked', false);
        $("#ecollect_request_template_decrypt_response").css("pointer-events","none");
      }
      else {
        $("#ecollect_request_template_algorithm").attr('readonly', false);
        $("#ecollect_request_template_api_type").attr('readonly', false);
        $("#ecollect_request_template_algorithm").css("pointer-events","auto");
        $("#ecollect_request_template_api_type").css("pointer-events","auto");
        $('#ecollect_request_template_url').prop('readOnly',false);
        $('#ecollect_request_template_secret_key').prop('readOnly',false);
        $("#ecollect_request_template_decrypt_response").css("pointer-events","auto");
      }
    });

    if(!$('#ecollect_request_template_is_hash_required').is(":checked")){
      $("#ecol-hash-templates-form :input").val('')
      $("#ecol-hash-templates-form :input").attr("disabled", true);
      $("#ecol-hash-parameters-form :input").val('')
      $("#ecol-hash-parameters-form :input").attr("disabled", true);
    }
    else {
      $("#ecol-hash-templates-form :input").attr("disabled", false);
      $("#ecol-hash-parameters-form :input").attr("disabled", false);
    }

    $("#ecollect_request_template_is_hash_required").on("click", function () {
      if (!$(this).is(":checked")){
        $("#ecol-hash-templates-form :input").val('')
        $("#ecol-hash-templates-form :input").attr("disabled", true);
        $("#ecol-hash-parameters-form :input").val('')
        $("#ecol-hash-parameters-form :input").attr("disabled", true);
      }
      else {
        $("#ecol-hash-templates-form :input").attr("disabled", false);
        $("#ecol-hash-parameters-form :input").attr("disabled", false);
      }
    });
    if($('#ecol-hash-parameters-form .nested-fields:visible').length > 5){
      $('#ecol-hash-parameters-form .links a').hide();
    }
    if($('#ecol-request-parameters-form .nested-fields:visible').length > 20){
      $('#ecol-request-parameters-form .links a').hide();
    }
    if($('#ecol-hash-parameters-form .nested-fields:visible').length == 1){
      $(".ecollect-hash-parameter-remove-entry").hide()
    }
    if($('#ecol-request-parameters-form .nested-fields:visible').length == 1){
      $(".ecollect-req-parameter-remove-entry").hide()
    }
    function ecol_hash_param_check_to_hide_or_show_add_link() {
       if ($('#ecol-hash-parameters-form .nested-fields:visible').length == 5) {
         $('#ecol-hash-parameters-form .links a').hide();
         alert("Only 5 forms can be added for Hash Parameter")
       } else {
         $('#ecol-hash-parameters-form .links a').show();
       }
     }

     $('#ecol-hash-parameters-form').on('cocoon:after-insert', function() {
       ecol_hash_param_check_to_hide_or_show_add_link();
     });

     $('#ecol-hash-parameters-form').on('cocoon:after-remove', function() {
       ecol_hash_param_check_to_hide_or_show_add_link();
       if($('#ecol-hash-parameters-form .nested-fields:visible').length == 1){
          $(".ecollect-hash-parameter-remove-entry").hide()
        }
     });

     ecol_hash_param_check_to_hide_or_show_add_link();

     function ecol_req_param_check_to_hide_or_show_add_link() {
       if ($('#ecol-request-parameters-form .nested-fields:visible').length == 20) {
         $('#ecol-request-parameters-form .links a').hide();
         alert("Only 20 forms can be added for Request Parameter")
       } else {
         $('#ecol-request-parameters-form .links a').show();
       }
     }

     $('#ecol-request-parameters-form').on('cocoon:after-insert', function() {
        ecol_req_param_check_to_hide_or_show_add_link();
     });

     $('#ecol-request-parameters-form').on('cocoon:after-remove', function() {
       ecol_req_param_check_to_hide_or_show_add_link();
       if($('#ecol-request-parameters-form .nested-fields:visible').length == 1){
          $(".ecollect-req-parameter-remove-entry").hide()
       }
     });

     ecol_req_param_check_to_hide_or_show_add_link();
  });
